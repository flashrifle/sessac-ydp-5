<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title><%= title%></title>
        <!-- Ajax cdn -->
        <script
            src="https://code.jquery.com/jquery-3.7.0.min.js"
            integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
            crossorigin="anonymous"
        ></script>
        <!-- Axios cdn -->
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    </head>
    <body>
        <h1>Dynamic Form !!</h1>
        <span>연결된 PORT는 <%= port%> 입니다.</span>
        <form name="register">
            <label for="name">이름</label>
            <input type="text" id="name" name="name" value="새싹" required />
            <br />
            <input type="radio" name="gender" value="m" id="male" required />
            <label for="male">남</label>
            <input type="radio" name="gender" value="f" id="female" />
            <label for="female">여</label>
            <br />
            <button type="button" onClick="ajaxGet();">Ajax Get 제출</button>
            <button type="button" onClick="ajaxPost();">Ajax Post 제출</button>
            <button type="button" onClick="axiosGet();">
                Axios Get 제출 ( + form validation )
            </button>
            <button type="button" onClick="axiosPost();">
                Axios Post 제출
            </button>
            <button type="button" onClick="fetchGet();">Fetch Get 제출</button>
            <button type="button" onClick="fetchPost();">
                Fetch Post 제출
            </button>
        </form>
        <!-- 동적폼 전송 결과를 보여줄 곳 -->
        <div class="result"></div>

        <h1>OPEN API를 이용해 고양이 사진 랜덤 돌리기</h1>
        <button onclick="changeImage()">랜덤</button>
        <img
            style="width: 400px; height: 400px"
            src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
            alt="고양이"
        />

        <script>
            const img = document.querySelector('img');
            async function changeImage() {
                const res = await axios({
                    method: 'get',
                    url: 'https://api.thecatapi.com/v1/images/search',
                });

                const { data } = res;
                img.src = data[0].url; // img태그의 src 속성을 open api에서 받아온 랜덤 이미지 주소로 변경
            }

            const result = document.querySelector('div.result');

            function ajaxGet() {
                console.log('ajaxGet 함수 호출');

                // 폼 선택
                const form = document.forms['register'];
                console.log(form);
                // 폼 객체 요소 확인
                console.dir(form);
                console.dir(form.name);
                console.dir(form.name.value); // 이름 input에 입력한 값
                console.dir(form.gender.value); // 성별 radio input을 선택한 값

                const data = {
                    name: form.name.value,
                    gender: form.gender.value,
                };

                // ajax로 서버에 get요청을 보내기
                $.ajax({
                    type: 'get', // 요청의 종류 (= form의 method 속성)
                    url: '/ajax', // 요청의 경로 (= form의 action 속성)
                    data: data, // 요청에 실어보낼 데이터 ( 서버가 받게 될 데이터 )
                    success: function (data) {
                        console.log(data);
                        result.textContent = `GET /ajax 요청 완료 ${data.name}님은 ${data.gender} 입니까?`;
                        result.style.color = 'red';
                    },
                });
            }

            function ajaxPost() {
                console.log('ajaxPost 함수 호출');

                const form = document.forms['register'];
                const data = {
                    name: form.name.value,
                    gender: form.gender.value,
                };

                // ajax로 서버에 post요청을 보내기
                $.ajax({
                    type: 'post',
                    url: '/ajax',
                    data: data,
                    success: function (data) {
                        console.log(data);
                        result.textContent = `POST /ajax 요청 완료 ${data.name}님은 ${data.gender} 입니까?`;
                        result.style.color = 'blue';
                    },
                });
            }

            async function axiosGet() {
                console.log('axisGet 호출');
                const form = document.forms['register'];
                const data = {
                    name: form.name.value,
                    gender: form.gender.value,
                };
                try {
                    // 폼 유효성 검사
                    // name input에 입력된 값이 없다면, '이름을 입력해주세요!'
                    // gender radio btn을 선택하지 않았다면, '성별을 선택해주세요!'
                    // 둘 다 입력이 잘 되었다면, axios로 back에 요청 날리기
                    if (!form.name.checkValidity()) {
                        // !false
                        result.textContent = '이름을 입력해주세요!';
                    } else if (!form.gender[0].checkValidity()) {
                        result.textContent = '성별을 선택해주세요!';
                    } else {
                        console.log(form.name.checkValidity());
                        // 같은 name으로 묶인 radio btn은 하나의

                        // axios 요청 결과는 Promise 객체
                        // then , catch 메서드로 체이닝이 가능
                        // async, await 도 사용 가능
                        const res = await axios({
                            method: 'GET',
                            url: '/axios',
                            params: data,
                        });
                        const { name, gender } = data;
                        result.textContent = `GET /Axios 요청 완료 ${name}님은 ${gender} 입니까?`;
                        result.style.color = 'red';
                    }
                } catch (err) {
                    console.log('==ERROR==', err);
                }
                // 2.axios 요청 처리 async/await
            }

            async function axiosPost() {
                console.log('axiosPost 호출');

                try {
                    const form = document.forms['register'];
                    const data = {
                        name: form.name.value,
                        gender: form.gender.value,
                    };
                    const response = await axios({
                        method: 'POST',
                        url: '/axios',
                        data: data, // Post는 params가 아니라 data면 data로 맞춰줘야함
                    });
                    const { name, gender } = data;
                    result.textContent = `POST /Axios 요청 완료 ${name}님은 ${gender} 입니까?`;
                    result.style.color = 'blue';
                } catch (err) {
                    console.log('==ERROR==', err);
                }
            }

            // fetch(url, options)
            function fetchGet() {
                console.log('fetchGet 호출');

                const form = document.forms['register'];
                const data = {
                    name: form.name.value,
                    gender: form.gender.value,
                };
                // fetch 는 기본옵션이 GET 으로 작동, options 생략 가능
                fetch(
                    `/fetch?name=${form.name.value}&gender=${form.gender.value}`
                )
                    .then((response) => {
                        console.log(response);
                        return response.json();
                        // JSON 형태로 응답 데이터를 전달받음. 응답 객체는 json() 메서드를 제공
                        // 응답 객체로부터 json 포맷의 응답 전문을 js 객체로 변환
                    })
                    .then((data) => {
                        console.log(data);
                        const { name, gender } = data;
                        result.textContent = `GET /Axios 요청 완료 ${name}님은 ${gender} 입니까?`;
                    });
            }

            function fetchPost() {
                console.log('fetchPost 함수 호출!');

                const form = document.forms['register'];
                const data = {
                    name: form.name.value,
                    gender: form.gender.value,
                }; // 서버에 넘겨줄 데이터

                // fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
                // 1. method 키 post 지정
                // 2. headers 키 JSON 포맷 사용 선언
                // 3. body 키 서버로 보낼 데이터
                fetch('/fetch', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                    // data: js obj
                    // JSON.stringify(data): js obj -> json
                })
                    .then((response) => {
                        console.log(response);
                        return response.json();
                    })
                    .then((response) => {
                        console.log(data);
                        result.textContent = `POST /fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
                    });
            }
        </script>
    </body>
</html>
